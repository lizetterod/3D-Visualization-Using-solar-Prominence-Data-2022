"""
Open/closed field map
=====================
Creating an open/closed field map on the solar surface. 
"""
############################################################################### 
# First, import required modules
import astropy.constants as const
import astropy.units as u
import matplotlib.colors as mcolor 
import matplotlib.pyplot as plt 
import numpy as np
import sunpy.map
from astropy.coordinates import SkyCoord 
from sunpy.data import manager
import pfsspy
from pfsspy import tracing 
#@manager.require('gong1',
#       'https://gong2.nso.edu/oQR/zqs/202009/mrzqs200901/'
#       'mrzqs200901t1304c2234_022.fits.gz') 
@manager.require('gong_map',
        'https://gong2.nso.edu/oQR/zqs/201207/mrzqs120723/' 'mrzqs120723t0554c2126_241.fits.gz',
        'b85e18b3fee0d7565930c01a222c3962b62f6b91ffacb7d3e357beee89cdf142') 
def get_my_gong_map(name, uri, file_name):
return manager.get(name)


############################################################################### 
# Load a GONG magnetic field map
manager.skip_hash_check()
#manager.require('gong_map',
#        'https://gong2.nso.edu/oQR/zqs/202009/mrzqs200901/'
#        'mrzqs200901t1304c2234_022.fits.gz',
#        'aad927d8f617f32b72255b862c4910f13640fc7ca13edf982'
#        '88cd0735a2db6a0')
gong_fname = get_my_gong_map('gong_map',
          'https://gong2.nso.edu/oQr/zqs/201207/mrzqs120723/',
          'mrzqs120723t0554c2126_241.fits.gz') 
print(gong_fname)
gong_map = sunpy.map.Map(gong_fname)


############################################################################### 

# Set the model parameters
nrho = 40
rss = 2.5

############################################################################### 
# Construct the input, and calculate the output solution

pfss_in = pfsspy.Input(gong_map, nrho, rss) 
pfss_out = pfsspy.pfss(pfss_in)
############################################################################### 
# Finally, using the 3D magnetic field solution we can trace some field lines.
# In this case a grid of 90 x 180 points equally gridded in theta and phi are
# chosen and traced from the source surface outwards.
#
# First, set up the tracing seeds


r = const.R_sun
# Number of steps in cos(latitude)
nsteps = 45
lon_1d = np.linspace(0, 2 * np.pi, nsteps * 2 + 1)
lat_1d = np.arcsin(np.linspace(-1, 1, nsteps + 1))
lon, lat = np.meshgrid(lon_1d, lat_1d, indexing='ij')
lon, lat = lon*u.rad, lat*u.rad
seeds = SkyCoord(lon.ravel(), lat.ravel(), r, frame=pfss_out.coordinate_frame)


############################################################################### 
# Trace the field lines
print('Tracing field lines...')
tracer = tracing.FortranTracer(max_steps=2000)
field_lines = tracer.trace(seeds, pfss_out) 
print('Finished tracing field lines')

############################################################################### 
# Plot the result. The to plot is the input magnetogram, and the bottom plot
# shows a contour map of the the footpoint polarities, which are +/- 1 for open
# field regions and 0 for closed field regions.
fig = plt.figure()
m = pfss_in.map
ax = fig.add_subplot(2, 1, 1, projection=m) 
m.plot()
ax.set_title('Input GONG Magnetogram')

ax = fig.add_subplot(2, 1, 2)
cmap = mcolor.ListedColormap(['tab:red', 'black', 'tab:blue'])
norm = mcolor.BoundaryNorm([-1.5, -0.5, 0.5, 1.5], ncolors=3)
pols = field_lines.polarities.reshape(2 * nsteps + 1, nsteps + 1).T 
ax.contourf(np.rad2deg(lon_1d), np.sin(lat_1d), pols, norm=norm, cmap=cmap) 
ax.set_ylabel('Sin (Latitude)')
ax.set_xlabel('Carrginton Longitude (Degrees)')
ax.set(xlim=(0, 360))

ax.set_title('Open (Blue/Red) and Closed (Black) Field') 
ax.set_aspect(0.5 * 360 / 2)

plt.show() 
plt.savefig('plot_2.png')
